import { Bot } from "grammy";
import Redis from "ioredis";

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error("TELEGRAM_BOT_TOKEN is unset");
const redisUrl = process.env.UPSTASH_REDIS_URL;
if (!redisUrl) throw new Error("UPSTASH_REDIS_URL is unset");

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
export const bot = new Bot(token);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞
const redis = new Redis(redisUrl);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
bot.command("start", async (ctx) => {
  await ctx.reply(
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Å –ø–æ–º–æ—â—å—é –ò–ò. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!"
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
let lastUpdateId = 0;
bot.on("message:text", async (ctx) => {
  const chatId = ctx.chat.id;
  const userMessage = ctx.message.text;
  const messageId = ctx.message.message_id;

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
  if (userMessage.startsWith("/") || ctx.update.update_id <= lastUpdateId) return;
  lastUpdateId = ctx.update.update_id;

  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await ctx.api.editMessageText(chatId, messageId, "‚è≥ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...");

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  const taskId = `task:${Date.now()}:${chatId}:${messageId}`;
  await redis.setex(taskId, 3600, JSON.stringify({ chatId, messageId, userMessage }));

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
  (async () => {
    try {
      const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
          "HTTP-Referer": process.env.YOUR_SITE_URL || "",
          "X-Title": process.env.YOUR_SITE_NAME || "",
        },
        body: JSON.stringify({
          model: "qwen/qwen3-235b-a22b:free",
          messages: [
            { role: "system", content: "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥ <think> –≤ –æ—Ç–≤–µ—Ç–∞—Ö." },
            { role: "user", content: userMessage },
          ],
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`API Error: ${response.status} - ${errorData.message || response.statusText}`);
      }

      const data = await response.json();
      const aiResponse = data.choices[0]?.message?.content?.trim();

      if (!aiResponse) {
        throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI");
      }

      // –£–¥–∞–ª—è–µ–º <think>-–±–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      const cleanedResponse = aiResponse.replace(/<think>[\s\S]*?<\/think>/g, '').trim();

      // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
      await ctx.api.editMessageText(chatId, messageId, cleanedResponse, {
        parse_mode: "Markdown",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
      await ctx.api.editMessageText(
        chatId,
        messageId,
        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
      );
    } finally {
      // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ Redis –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await redis.del(taskId);
    }
  })();
});