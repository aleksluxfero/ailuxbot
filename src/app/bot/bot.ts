import { Bot } from "grammy";
import Redis from "ioredis";

const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) throw new Error("TELEGRAM_BOT_TOKEN is unset");
const redisUrl = process.env.UPSTASH_REDIS_URL;
if (!redisUrl) throw new Error("UPSTASH_REDIS_URL is unset");

export const bot = new Bot(token);
const redis = new Redis(redisUrl);

let lastUpdateId = 0;

// –ö–æ–º–∞–Ω–¥–∞ /start (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –æ–Ω–∞ –±—ã—Å—Ç—Ä–∞—è)
bot.command("start", async (ctx) => {
  await ctx.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! ...");
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ async, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å)
bot.on("message:text", (ctx) => {
  const chatId = ctx.chat.id;
  const userMessage = ctx.message.text;
  const messageId = ctx.message.message_id;

  if (userMessage.startsWith("/") || ctx.update.update_id <= lastUpdateId) return;
  lastUpdateId = ctx.update.update_id;

  // Fire-and-forget –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –∂–¥–µ–º)
  ctx.api.editMessageText(chatId, messageId, "‚è≥ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...").catch((err) => console.error("–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", err));

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ Redis (then/catch –≤–º–µ—Å—Ç–æ await)
  const taskId = `task:${Date.now()}:${chatId}:${messageId}`;
  redis.setex(taskId, 3600, JSON.stringify({ chatId, messageId, userMessage }))
    .then(() => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      processTask(taskId, chatId, messageId, userMessage);
    })
    .catch((err) => {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis:", err);
      // Fallback: —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—à–∏–±–∫—É
      ctx.api.editMessageText(chatId, messageId, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.").catch(console.error);
    });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ (–≤—ã–Ω–æ—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ)
async function processTask(taskId: string, chatId: number, messageId: number, userMessage: string) {
  try {
    const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": process.env.YOUR_SITE_URL || "",
        "X-Title": process.env.YOUR_SITE_NAME || "",
      },
      body: JSON.stringify({
        model: "qwen/qwen3-235b-a22b:free",
        messages: [
          { role: "system", content: "–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–≥ <think> –≤ –æ—Ç–≤–µ—Ç–∞—Ö." },
          { role: "user", content: userMessage },
        ],
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`API Error: ${response.status} - ${errorData.message || response.statusText}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0]?.message?.content?.trim();

    if (!aiResponse) {
      throw new Error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI");
    }

    const cleanedResponse = aiResponse.replace(/<think>[\s\S]*?<\/think>/g, '').trim();

    await bot.api.editMessageText(chatId, messageId, cleanedResponse, {
      parse_mode: "Markdown",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    await bot.api.editMessageText(
      chatId,
      messageId,
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    );
  } finally {
    await redis.del(taskId);
  }
}